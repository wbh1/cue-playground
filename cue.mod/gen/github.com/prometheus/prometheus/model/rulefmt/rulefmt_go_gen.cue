// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/prometheus/prometheus/model/rulefmt

package rulefmt

import (
	"gopkg.in/yaml.v3:yaml"
	"github.com/prometheus/common/model"
)

// Error represents semantic errors on parsing rule groups.
#Error: {
	Group:    string
	Rule:     int
	RuleName: string
}

// RuleGroups is a set of rule groups that are typically exposed in a file.
#RuleGroups: {
	groups: [...#RuleGroup] @go(Groups,[]RuleGroup)
}

_#ruleGroups: {
	groups: [...yaml.#Node] @go(Groups,[]yaml.Node)
}

// RuleGroup is a list of sequentially evaluated recording and alerting rules.
#RuleGroup: {
	name:      string          @go(Name)
	interval?: model.#Duration @go(Interval)
	limit?:    int             @go(Limit)
	rules: [...#RuleNode] @go(Rules,[]RuleNode)
}

// Rule describes an alerting or recording rule.
#Rule: {
	record?: string          @go(Record)
	alert?:  string          @go(Alert)
	expr:    string          @go(Expr)
	for?:    model.#Duration @go(For)
	labels?: {[string]: string} @go(Labels,map[string]string)
	annotations?: {[string]: string} @go(Annotations,map[string]string)
}

// RuleNode adds yaml.v3 layer to support line and column outputs for invalid rules.
#RuleNode: {
	record?: yaml.#Node      @go(Record)
	alert?:  yaml.#Node      @go(Alert)
	expr:    yaml.#Node      @go(Expr)
	for?:    model.#Duration @go(For)
	labels?: {[string]: string} @go(Labels,map[string]string)
	annotations?: {[string]: string} @go(Annotations,map[string]string)
}
